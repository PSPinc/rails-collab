# frozen_string_literal: true

# uuid-ossp.uuid_generate_v4() uses arc4random
# pgcrypto.gen_random_uuid() uses fortuna
#
# arc4random may have some security issues tied to the OS libraries.
# fortuna is faster than arc4random.

class CreateCollabTables < ActiveRecord::Migration[6.0]
  def up
    unless ActiveRecord::Base.connection.schema_exists?('conversations')
      ActiveRecord::Base.connection.create_schema('conversations')
    end
    enable_extension 'pgcrypto' unless extensions.include?('pgcrypto')

    # document version tracking
    create_table :"conversations.collab_documents"<%=
                 ", id: #{@primary_key_type.inspect}",
                 default: 'public.gen_random_uuid()' if @primary_key_type
    %> do |tbl|
      tbl.references :attached, null: false, index: false, polymorphic: true<%=
                     ", type: #{@primary_key_type.inspect}" if @primary_key_type %>
      tbl.string :attached_as, null: false

      tbl.jsonb :content, null: false
      tbl.string :schema_name, null: false
      tbl.integer :document_version, null: false, default: 0
      tbl.text :serialized_html

      tbl.timestamps

      tbl.index %i[attached_type attached_id attached_as], name: :idx_collab_documents_on_attached
    end

    # document change tracking
    create_table :'conversations.collab_commits', id: false do |tbl|
      tbl.references :document, null: false, index: false,
                     foreign_key: { to_table: :collab_documents }<%= ",
                     type: #{@primary_key_type.inspect}" if @primary_key_type
      %>
      tbl.integer :document_version, null: false

      tbl.jsonb :steps, array: true, null: false
      tbl.string :ref

      # ensure high-precision
      tbl.datetime :created_at, precision: 6, null: false

      tbl.index %i[document_id document_version], unique: true, order: { document_version: :asc },
                                                  name: :idx_collab_commits
    end

    # document cursor tracking
    create_table :'conversations.collab_tracked_positions'<%=
                 ", id: #{@primary_key_type.inspect}" if @primary_key_type
    %> do |tbl|
      tbl.references :document, null: false, index: false,
                     foreign_key: { to_table: :collab_documents }<%= ",
                     type: #{@primary_key_type.inspect}" if @primary_key_type
      %>
      tbl.references :owner, null: false, polymorphic: true, index: false<%= ",
                     type: #{@primary_key_type.inspect}" if @primary_key_type
      %>

      tbl.string :name, null: false
      tbl.integer :pos, null: false
      tbl.integer :assoc, null: false, default: 1
      tbl.integer :deleted_at_version

      tbl.index %i[document_id deleted_at_version pos],
                name: :idx_collab_tracked_positions_on_document_pos
      tbl.index %i[owner_type name owner_id], name: :idx_collab_tracked_positions_on_owner
    end

    # document-client tracking (WebSocket support)
    create_table :'conversations.collab_document_clients', force: :cascade do |tbl|
      tbl.string :name
      tbl.bigint :document_id, null: false

      # ensure high-precision
      tbl.datetime :created_at, precision: 6, null: false
      tbl.datetime :updated_at, precision: 6, null: false

      tbl.index %i[document_id], name: :idx_collab_document_clients_on_document_id
    end
  end

  def down
    drop_table :'conversations.collab_tracked_positions'
    drop_table :'conversations.collab_commits'
    drop_table :'conversations.collab_documents'
    drop_table :'conversations.collab_document_clients'

    if ActiveRecord::Base.connection.schema_exists?('conversations')
      ActiveRecord::Base.connection.drop_schema('conversations')
    end
    remove_extension 'pgcrypto' if extensions.include?('pgcrypto')
  end
end
